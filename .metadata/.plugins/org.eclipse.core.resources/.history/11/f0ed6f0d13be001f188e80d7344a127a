package bookings;

import database.DatabaseConnection;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class BookingManagement extends JPanel {

    private JTable table;
    private DefaultTableModel tableModel;
    private JComboBox<String> tourComboBox;
    private JComboBox<String> guideComboBox;

    public BookingManagement() {
        setLayout(new BorderLayout());

        // Tạo bảng để hiển thị danh sách booking
        String[] columnNames = {"ID Đặt Tour", "Tên Khách Hàng", "Tên Tour", "Hướng Dẫn Viên", "Ngày Đặt", "Trạng Thái Thanh Toán"};
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        // Tạo panel nút để thêm, sửa, xoá booking
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton btnAddBooking = new JButton("Đặt Tour");
        buttonPanel.add(btnAddBooking);

        // Label tiêu đề
        JLabel lblNewLabel = new JLabel("Danh sách Đặt Tour", JLabel.CENTER);
        lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 18));
        add(lblNewLabel, BorderLayout.NORTH);

        add(buttonPanel, BorderLayout.SOUTH);

        // Panel chọn Tour và Hướng dẫn viên
        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        inputPanel.add(new JLabel("Chọn Tour:"));
        tourComboBox = new JComboBox<>();
        inputPanel.add(tourComboBox);

        inputPanel.add(new JLabel("Chọn Hướng Dẫn Viên:"));
        guideComboBox = new JComboBox<>();
        inputPanel.add(guideComboBox);

        add(inputPanel, BorderLayout.NORTH);

        // Load dữ liệu từ database
        loadTourData();
        loadGuideData();

        // Action khi click vào nút Đặt Tour
        btnAddBooking.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addBooking();
            }
        });
    }

    // Load danh sách các Tour từ cơ sở dữ liệu vào JComboBox
    public void loadTourData() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT id_tour, tour_name FROM tours";
            rs = stmt.executeQuery(sql);

            tourComboBox.removeAllItems();
            while (rs.next()) {
                String tourName = rs.getString("tour_name");
                tourComboBox.addItem(tourName);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Load danh sách Hướng dẫn viên từ cơ sở dữ liệu vào JComboBox
    public void loadGuideData() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT id_guide, full_name FROM guides";
            rs = stmt.executeQuery(sql);

            guideComboBox.removeAllItems();
            while (rs.next()) {
                String guideName = rs.getString("full_name");
                guideComboBox.addItem(guideName);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Hàm thêm booking vào cơ sở dữ liệu
    private void addBooking() {
        String selectedTour = (String) tourComboBox.getSelectedItem();
        String selectedGuide = (String) guideComboBox.getSelectedItem();

        // Lấy id của Tour và Hướng dẫn viên từ tên
        int tourId = getTourIdByName(selectedTour);
        int guideId = getGuideIdByName(selectedGuide);

        // Lưu thông tin đặt tour vào cơ sở dữ liệu
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "INSERT INTO bookings (id_customer, id_tour, booking_date, id_guide, payment_status, total_price) " +
                         "VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, 1);  // Giả sử id_customer là 1
            pst.setInt(2, tourId);
            pst.setDate(3, Date.valueOf("2024-12-20"));  // Ngày đặt tour
            pst.setInt(4, guideId);
            pst.setString(5, "unpaid");  // Trạng thái thanh toán
            pst.setBigDecimal(6, new java.math.BigDecimal(1000.00));  // Tổng giá tour

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Đặt tour thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadBookingData();  // Tải lại dữ liệu bảng booking
            }

            pst.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi đặt tour", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Lấy ID Tour từ tên Tour
    private int getTourIdByName(String tourName) {
        // Tìm kiếm ID Tour từ tên tour
        return 1; // Placeholder
    }

    // Lấy ID Hướng dẫn viên từ tên hướng dẫn viên
    private int getGuideIdByName(String guideName) {
        // Tìm kiếm ID hướng dẫn viên từ tên
        return 1; // Placeholder
    }

    // Tải lại dữ liệu đặt tour
    private void loadBookingData() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT b.id_booking, c.full_name, t.tour_name, g.full_name, b.booking_date, b.payment_status " +
                         "FROM bookings b " +
                         "JOIN customers c ON b.id_customer = c.id_customer " +
                         "JOIN tours t ON b.id_tour = t.id_tour " +
                         "JOIN guides g ON b.id_guide = g.id_guide";
            rs = stmt.executeQuery(sql);

            tableModel.setRowCount(0);
            while (rs.next()) {
                int bookingId = rs.getInt("id_booking");
                String customerName = rs.getString("c.full_name");
                String tourName = rs.getString("t.tour_name");
                String guideName = rs.getString("g.full_name");
                Date bookingDate = rs.getDate("b.booking_date");
                String paymentStatus = rs.getString("b.payment_status");

                tableModel.addRow(new Object[]{bookingId, customerName, tourName, guideName, bookingDate, paymentStatus});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
