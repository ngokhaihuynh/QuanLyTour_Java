package Booking;

import database.DatabaseConnection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

public class AddEditBookingForm extends JFrame {
    private JTextField txtCustomerName;
    private JComboBox<String> cboDestination;
    private JComboBox<String> cboGuide;
    private JComboBox<String> cboTour;
    private JTextField txtTotalPrice;
    private JButton btnSaveBooking;
    
    public AddEditBookingForm() {
        setTitle("Thêm Đặt Tour");
        setSize(400, 400);
        setLayout(new GridLayout(6, 2));

        JLabel lblCustomerName = new JLabel("Tên khách hàng:");
        txtCustomerName = new JTextField();
        JLabel lblDestination = new JLabel("Điểm đến:");
        cboDestination = new JComboBox<>();
        JLabel lblGuide = new JLabel("Hướng dẫn viên:");
        cboGuide = new JComboBox<>();
        JLabel lblTour = new JLabel("Tour:");
        cboTour = new JComboBox<>();
        JLabel lblTotalPrice = new JLabel("Tổng tiền:");
        txtTotalPrice = new JTextField();
        txtTotalPrice.setEditable(false);
        
        btnSaveBooking = new JButton("Lưu Đặt Tour");

        add(lblCustomerName);
        add(txtCustomerName);
        add(lblDestination);
        add(cboDestination);
        add(lblGuide);
        add(cboGuide);
        add(lblTour);
        add(cboTour);
        add(lblTotalPrice);
        add(txtTotalPrice);
        add(btnSaveBooking);

        // Lấy danh sách điểm đến
        loadDestinations();

        // Action listener cho ComboBox để lấy tour theo điểm đến
        cboDestination.addActionListener(e -> loadToursByDestination());

        // Action listener cho ComboBox để tính tổng tiền theo tour
        cboTour.addActionListener(e -> updateTotalPrice());

        // Action listener cho nút Lưu đặt tour
        btnSaveBooking.addActionListener(e -> saveBooking());
        
        setVisible(true);
    }

    // Lấy danh sách điểm đến từ cơ sở dữ liệu
    private void loadDestinations() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DatabaseConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT * FROM destinations";
            rs = stmt.executeQuery(sql);
            
            // Thêm các điểm đến vào ComboBox
            while (rs.next()) {
                String destinationName = rs.getString("destination_name");
                cboDestination.addItem(destinationName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Lấy danh sách tour theo điểm đến đã chọn
    private void loadToursByDestination() {
        int selectedDestinationIndex = cboDestination.getSelectedIndex();
        if (selectedDestinationIndex == -1) return;

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        try {
            conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM tours WHERE id_destination = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, selectedDestinationIndex + 1); // Vì index bắt đầu từ 0
            rs = pstmt.executeQuery();
            
            cboTour.removeAllItems();
            while (rs.next()) {
                String tourName = rs.getString("tour_name");
                cboTour.addItem(tourName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Cập nhật tổng tiền khi chọn tour
    private void updateTotalPrice() {
        int selectedTourIndex = cboTour.getSelectedIndex();
        if (selectedTourIndex == -1) return;

        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            conn = DatabaseConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT price FROM tours WHERE id_tour = " + (selectedTourIndex + 1);
            rs = stmt.executeQuery(sql);
            
            if (rs.next()) {
                double totalPrice = rs.getDouble("price");
                txtTotalPrice.setText(String.valueOf(totalPrice));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Lưu thông tin booking vào cơ sở dữ liệu
    private void saveBooking() {
        String customerName = txtCustomerName.getText();
        double totalPrice = Double.parseDouble(txtTotalPrice.getText());
        int selectedDestinationIndex = cboDestination.getSelectedIndex();
        int selectedTourIndex = cboTour.getSelectedIndex();
        int selectedGuideIndex = cboGuide.getSelectedIndex();
        
        if (customerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên khách hàng");
            return;
        }
        
        // Lưu khách hàng nếu chưa có trong cơ sở dữ liệu
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = DatabaseConnection.getConnection();
            
            // Kiểm tra khách hàng đã có trong database chưa
            String checkCustomerSql = "SELECT id_customer FROM customers WHERE full_name = ?";
            pstmt = conn.prepareStatement(checkCustomerSql);
            pstmt.setString(1, customerName);
            rs = pstmt.executeQuery();
            
            int customerId = -1;
            if (rs.next()) {
                customerId = rs.getInt("id_customer");
            } else {
                // Nếu chưa có, thêm mới khách hàng vào database
                String insertCustomerSql = "INSERT INTO customers (full_name) VALUES (?)";
                pstmt = conn.prepareStatement(insertCustomerSql, Statement.RETURN_GENERATED_KEYS);
                pstmt.setString(1, customerName);
                pstmt.executeUpdate();
                
                rs = pstmt.getGeneratedKeys();
                if (rs.next()) {
                    customerId = rs.getInt(1);
                }
            }
            
            // Thêm booking vào bảng bookings
            String insertBookingSql = "INSERT INTO bookings (id_customer, id_tour, id_destination, id_guide, total_price, booking_date, payment_status) VALUES (?, ?, ?, ?, ?, CURDATE(), 'unpaid')";
            pstmt = conn.prepareStatement(insertBookingSql);
            pstmt.setInt(1, customerId);
            pstmt.setInt(2, selectedTourIndex + 1);  // Vì index bắt đầu từ 0
            pstmt.setInt(3, selectedDestinationIndex + 1);
            pstmt.setInt(4, selectedGuideIndex + 1);  // Thêm điều kiện chọn hướng dẫn viên
            pstmt.setDouble(5, totalPrice);
            
            pstmt.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Đặt tour thành công!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đặt tour thất bại!");
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        new AddEditBookingForm();
    }
}
